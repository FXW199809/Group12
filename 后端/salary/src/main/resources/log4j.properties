#设置日志的级别，定义日志信息的输出目的
log4j.rootLogger=INFO,stdout,db
### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
#这个配置是选择使用JDBCAppender方法，
# 将日志信息存储到数据库。当然，如果你还要做其他操作，
# 可以自己写个类，继承JDBCAppender就OK了。
log4j.appender.db = org.apache.log4j.jdbc.JDBCAppender
#这个配置是告诉LOG4J，有多少条日志信息后才存入数据库，我这里是1,
# 就是说有一条就查一条，显然这样在生产环境下是很影响系统性能的。
log4j.appender.db.BufferSize=1
#这个配置是告诉LOG4J，做数据库存储所用的驱动。
log4j.appender.db.driver=com.mysql.jdbc.Driver
#这个配置数据库连接的URL
log4j.appender.db.URL=jdbc:mysql://localhost:3306/salary?serverTimezone=GMT%2B8
#数据库连接时的用户名和密码
log4j.appender.db.user=root
log4j.appender.db.password=root
#指定布局格式
log4j.appender.db.layout=org.apache.log4j.PatternLayout
log4j.appender.db.layout.ConversionPattern = [QC] %p [%t] %C.%M(%L) | %m%n
#这个配置是告诉当LOG4J吧日志存储数据库时用的SQL语句。
# ‘%C’是日志中的CLASS；‘%M’是打印日志是执行到类里的方法；
# ‘%d’是打印的时间，它支持格式化；‘%P’是日志级别，
# 包括INFO、DEBUG、ERROR等；‘%m’是MSG，日志内容。
# 注意这里的参数区分大小写。
#to_date('%d{yyyy-MM-dd HH:mm:ss}'
log4j.appender.db.sql = insert into t_operation_log (table_name, column_name,change_id, before_value, after_value,user_id, operation_datetime, operation_type) values('%X{name}',"%X{column_name}","%X{change_id}","%X{before_value}","%X{after_value}","%X{user_id}",now(),"%X{operation_type}")